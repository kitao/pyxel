name: Build

on: [workflow_call, workflow_dispatch]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            arch: x64
            make: make

          - target: i686-pc-windows-msvc
            os: windows-latest
            arch: x86
            make: make

          - target: x86_64-apple-darwin
            os: macos-latest
            arch: x64
            make: make

          - target: aarch64-apple-darwin
            os: macos-latest
            arch: x64
            make: make

          #- target: x86_64-unknown-linux-gnu
          #  os: macos-latest
          #  arch: x64
          #  make: make ZIG=1

          #- target: aarch64-unknown-linux-gnu
          #  os: macos-latest
          #  arch: x64
          #  make: make ZIG=1

          - target: wasm32-unknown-emscripten
            os: ubuntu-latest
            arch: x64
            make: RUSTUP_TOOLCHAIN=nightly make

    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true

      - name: Install Nightly Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          components: rustfmt

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.arch }}

      - name: Install Python packages
        run: |
          pip3 install -r requirements.txt

      - name: Install Zig
        if: matrix.target == 'x86_64-unknown-linux-gnu' || matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          pip3 install ziglang
          echo "MATURIN_WITH_ZIG=1" >> $GITHUB_ENV

      - name: Install Emscripten
        if: matrix.target == 'wasm32-unknown-emscripten'
        uses: mymindstorm/setup-emsdk@v11
        with:
          version: '3.1.14'

      - name: Build wheels
        run: |
          ${{ matrix.make }} TARGET=${{ matrix.target }}

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: pyxel-wheels
          path: dist/*.whl

  build-x86_64-linux:
    runs-on: ubuntu-latest
    container:
      image: quay.io/pypa/manylinux2014_x86_64:latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true

      - name: Install Nightly Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          components: rustfmt

      - name: Add Python to PATH
        run: |
          echo "/opt/python/cp310-cp310/bin" >> $GITHUB_PATH

      - name: Install SDL2
        run: |
          yum -y install SDL2-devel

      - name: Install Python packages
        run: |
          pip3 install -r requirements.txt

      - name: Build wheels
        run: |
          make TARGET="x86_64-unknown-linux-gnu"

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: pyxel-wheels
          path: dist/*.whl

  build-aarch64-linux:
    runs-on: ubuntu-latest
    container:
      image: messense/manylinux2014-cross:aarch64

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true

      - name: Install Nightly Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          components: rustfmt

      - name: Add Python to PATH
        run: |
          echo "/opt/python/cp310-cp310/bin" >> $GITHUB_PATH

      - name: Install SDL2
        run: |
          yum -y install SDL2-devel

      - name: Install Python packages
        run: |
          pip3 install -r requirements.txt

      - name: Build wheels
        run: |
          make TARGET="aarch64-unknown-linux-gnu"

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: pyxel-wheels
          path: dist/*.whl
