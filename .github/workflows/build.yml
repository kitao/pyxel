name: Build

on: [workflow_call, workflow_dispatch]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            arch: x64
            make: make

          - target: i686-pc-windows-msvc
            os: windows-latest
            arch: x86
            make: make

          - target: x86_64-apple-darwin
            os: macos-latest
            arch: x64
            make: make

          - target: aarch64-apple-darwin
            os: macos-latest
            arch: x64
            make: make

          - target: wasm32-unknown-emscripten
            os: ubuntu-latest
            arch: x64
            make: RUSTUP_TOOLCHAIN=nightly make

    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true

      - name: Install Nightly Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          components: rustfmt

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.arch }}

      - name: Install Python packages
        run: |
          pip install -r requirements.txt

      - name: Install Emscripten
        if: matrix.target == 'wasm32-unknown-emscripten'
        uses: mymindstorm/setup-emsdk@v11
        with:
          version: '3.1.14'

      - name: Build wheels
        run: |
          ${{ matrix.make }} TARGET=${{ matrix.target }}

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: pyxel-wheels
          path: dist/*.whl

  build-linux:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            image: messense/manylinux2014-cross:x86_64

          - target: aarch64-unknown-linux-gnu
            image: messense/manylinux2014-cross:aarch64

    runs-on: ubuntu-latest
    container: ${{ matrix.image }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true

      - name: Install Nightly Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          components: rustfmt

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python packages
        run: |
          pip install -r requirements.txt

      - name: Build X11 and SDL2
        run: |
          export CC=$TARGET_CC
          export AR=$TARGET_AR
          export RANLIB=$TARGET_RANLIB

          export X11_VERSION=1.8.1
          curl -sqLO https://www.x.org/releases/individual/lib/libX11-${X11_VERSION}.tar.gz
          tar xzf libX11-${X11_VERSION}.tar.gz
          cd libX11-${X11_VERSION}
          CFLAGS="-O3 -fPIC" ./configure \
            --build=x86_64-unknown-linux-gnu \
            --host=${{ matrix.target }} \
            --prefix=/usr/${{ matrix.target }}/
          make -j4
          make -j4 install
          cd ..

          export SDL2_VERSION=2.24.0
          curl -sqLO https://github.com/libsdl-org/SDL/releases/download/release-${SDL2_VERSION}/SDL2-${SDL2_VERSION}.tar.gz
          tar xzf SDL2-${SDL2_VERSION}.tar.gz
          cd SDL2-${SDL2_VERSION}
          CFLAGS="-O3 -fPIC" ./configure \
            --build=x86_64-unknown-linux-gnu \
            --host=${{ matrix.target }} \
            --prefix=/usr/${{ matrix.target }}/
          make -j4
          make -j4 install

      - name: Build wheels
        run: |
          export RUSTFLAGS="-L/usr/${{ matrix.target }}/lib"
          make TARGET=${{ matrix.target }}

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: pyxel-wheels
          path: dist/*.whl
